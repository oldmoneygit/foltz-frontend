#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para processar imagens e envi√°-las √† API do Claude
Redimensiona automaticamente imagens que excedem 2000px em qualquer dimens√£o
"""

import os
import sys
import base64
import json
from pathlib import Path
from PIL import Image
import io
import anthropic

# Configurar encoding UTF-8 no Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

# Carregar vari√°veis de ambiente do arquivo .env
from dotenv import load_dotenv
load_dotenv()

# Configura√ß√µes
MAX_DIMENSION = 2000  # Limite da API para many-image requests
IMAGE_FOLDERS = ["seedream", "id_visual"]
ANTHROPIC_API_KEY = os.environ.get("ANTHROPIC_API_KEY")

def get_image_dimensions(image_path):
    """Retorna as dimens√µes da imagem"""
    with Image.open(image_path) as img:
        return img.size

def resize_image_if_needed(image_path, max_dimension=MAX_DIMENSION):
    """
    Redimensiona a imagem se exceder max_dimension em qualquer dimens√£o
    Mant√©m a propor√ß√£o original
    Retorna bytes da imagem processada
    """
    with Image.open(image_path) as img:
        width, height = img.size

        # Verifica se precisa redimensionar
        if width <= max_dimension and height <= max_dimension:
            # N√£o precisa redimensionar, retorna a imagem original
            with open(image_path, 'rb') as f:
                return f.read()

        # Calcula novas dimens√µes mantendo propor√ß√£o
        if width > height:
            new_width = max_dimension
            new_height = int((max_dimension / width) * height)
        else:
            new_height = max_dimension
            new_width = int((max_dimension / height) * width)

        # Redimensiona
        img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)

        # Converte para bytes
        buffer = io.BytesIO()
        # Salva no formato original se poss√≠vel
        img_format = img.format or 'JPEG'
        img_resized.save(buffer, format=img_format, quality=90)

        print(f"  ‚úì Redimensionada de {width}x{height} para {new_width}x{new_height}")

        return buffer.getvalue()

def image_to_base64(image_bytes):
    """Converte bytes da imagem para base64"""
    return base64.b64encode(image_bytes).decode('utf-8')

def get_media_type(file_path):
    """Retorna o media type baseado na extens√£o"""
    ext = file_path.suffix.lower()
    media_types = {
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.png': 'image/png',
        '.gif': 'image/gif',
        '.webp': 'image/webp'
    }
    return media_types.get(ext, 'image/jpeg')

def collect_images(folders, limit=None):
    """Coleta todas as imagens das pastas especificadas"""
    images = []

    for folder in folders:
        folder_path = Path(folder)
        if not folder_path.exists():
            print(f"‚ö†Ô∏è  Pasta n√£o encontrada: {folder}")
            continue

        print(f"\nüìÅ Processando pasta: {folder}")

        # Busca imagens nas extens√µes suportadas
        for ext in ['*.jpg', '*.jpeg', '*.png', '*.gif', '*.webp']:
            for img_path in folder_path.glob(ext):
                if limit and len(images) >= limit:
                    break

                try:
                    width, height = get_image_dimensions(img_path)
                    needs_resize = width > MAX_DIMENSION or height > MAX_DIMENSION

                    print(f"  {img_path.name} ({width}x{height})", end="")
                    if needs_resize:
                        print(" ‚Üí Precisa redimensionar")
                    else:
                        print(" ‚Üí OK")

                    images.append(img_path)

                except Exception as e:
                    print(f"  ‚úó Erro ao processar {img_path.name}: {e}")

        if limit and len(images) >= limit:
            break

    return images

def process_images_for_api(image_paths):
    """Processa imagens e retorna lista pronta para a API"""
    processed_images = []

    print(f"\nüîÑ Processando {len(image_paths)} imagens para a API...")

    for img_path in image_paths:
        try:
            # Redimensiona se necess√°rio
            image_bytes = resize_image_if_needed(img_path)

            # Converte para base64
            image_base64 = image_to_base64(image_bytes)

            # Prepara objeto para a API
            processed_images.append({
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": get_media_type(img_path),
                    "data": image_base64
                }
            })

        except Exception as e:
            print(f"  ‚úó Erro ao processar {img_path.name}: {e}")

    print(f"‚úì {len(processed_images)} imagens processadas com sucesso")
    return processed_images

def analyze_images_with_claude(processed_images, prompt="Descreva estas imagens de produtos de forma detalhada."):
    """Envia imagens processadas para a API do Claude"""

    if not ANTHROPIC_API_KEY:
        print("‚ùå ANTHROPIC_API_KEY n√£o encontrada nas vari√°veis de ambiente")
        print("   Configure com: export ANTHROPIC_API_KEY='sua-chave'")
        return None

    client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

    # Constr√≥i a mensagem com o prompt seguido das imagens
    content = [{"type": "text", "text": prompt}] + processed_images

    print(f"\nü§ñ Enviando {len(processed_images)} imagens para Claude...")

    try:
        message = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=4096,
            messages=[
                {
                    "role": "user",
                    "content": content
                }
            ]
        )

        print("‚úì Resposta recebida com sucesso!")
        return message.content[0].text

    except Exception as e:
        print(f"‚ùå Erro na API: {e}")
        return None

def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("üñºÔ∏è  PROCESSADOR DE IMAGENS PARA CLAUDE API")
    print("="*60)
    print(f"Limite m√°ximo por dimens√£o: {MAX_DIMENSION}px")

    # Coleta imagens (limitando a 5 para teste)
    image_paths = collect_images(IMAGE_FOLDERS, limit=5)

    if not image_paths:
        print("\n‚ùå Nenhuma imagem encontrada!")
        return

    print(f"\nüìä Total de imagens coletadas: {len(image_paths)}")

    # Processa imagens
    processed_images = process_images_for_api(image_paths)

    if not processed_images:
        print("\n‚ùå Nenhuma imagem foi processada com sucesso!")
        return

    # Pergunta ao usu√°rio se deseja enviar para a API
    print("\n" + "="*60)
    response = input("Deseja enviar estas imagens para a API do Claude? (s/n): ")

    if response.lower() in ['s', 'sim', 'y', 'yes']:
        # Prompt personalizado
        prompt = input("\nDigite o prompt para an√°lise (ou Enter para o padr√£o): ").strip()
        if not prompt:
            prompt = "Analise estas imagens de produtos de jerseys de futebol. Para cada imagem, descreva: 1) Qual time/sele√ß√£o, 2) Cor predominante, 3) Caracter√≠sticas visuais √∫nicas, 4) Sugest√£o de nome/categoria para e-commerce."

        result = analyze_images_with_claude(processed_images, prompt)

        if result:
            print("\n" + "="*60)
            print("üìù RESPOSTA DO CLAUDE:")
            print("="*60)
            print(result)

            # Salva resultado
            with open("claude_analysis_result.txt", "w", encoding="utf-8") as f:
                f.write(result)
            print("\n‚úì Resultado salvo em: claude_analysis_result.txt")
    else:
        print("\n‚úì Imagens processadas e prontas. API n√£o foi chamada.")

    print("\n" + "="*60)
    print("‚ú® Processamento conclu√≠do!")
    print("="*60)

if __name__ == "__main__":
    main()
