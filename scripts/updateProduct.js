const readline = require('readline')
const {
  listAllProducts,
  getProductByHandle,
  updateProductPrice,
  updateProductTitle,
  updateProductDescription,
  addProductImage,
  deleteProductImage,
  buildGid
} = require('../src/lib/shopifyAdmin.js')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

async function main() {
  console.log('\nüõçÔ∏è  FOLTZ - Gerenciador de Produtos Shopify\n')

  try {
    // Listar produtos
    console.log('üì¶ Carregando produtos...\n')
    const products = await listAllProducts()

    console.log('Produtos dispon√≠veis:\n')
    products.forEach((product, index) => {
      const price = product.variants?.edges[0]?.node?.price || 'N/A'
      console.log(`${index + 1}. ${product.title} (${product.handle}) - ARS ${price}`)
    })

    console.log('\n')
    const productIndex = await question('Digite o n√∫mero do produto que deseja editar: ')
    const selectedProduct = products[parseInt(productIndex) - 1]

    if (!selectedProduct) {
      console.log('‚ùå Produto n√£o encontrado!')
      rl.close()
      return
    }

    console.log(`\n‚úÖ Produto selecionado: ${selectedProduct.title}\n`)

    // Menu de op√ß√µes
    console.log('O que voc√™ deseja fazer?\n')
    console.log('1. Atualizar pre√ßo')
    console.log('2. Atualizar t√≠tulo')
    console.log('3. Atualizar descri√ß√£o')
    console.log('4. Adicionar imagem')
    console.log('5. Remover imagem')
    console.log('0. Sair\n')

    const option = await question('Escolha uma op√ß√£o: ')

    switch (option) {
      case '1':
        // Atualizar pre√ßo
        const newPrice = await question('Digite o novo pre√ßo: ')
        const newCompareAt = await question('Digite o pre√ßo comparativo (ou deixe vazio): ')

        console.log('\n‚è≥ Atualizando pre√ßo...')
        await updateProductPrice(
          selectedProduct.id,
          parseFloat(newPrice),
          newCompareAt ? parseFloat(newCompareAt) : null
        )
        console.log('‚úÖ Pre√ßo atualizado com sucesso!')
        break

      case '2':
        // Atualizar t√≠tulo
        const newTitle = await question('Digite o novo t√≠tulo: ')

        console.log('\n‚è≥ Atualizando t√≠tulo...')
        await updateProductTitle(selectedProduct.id, newTitle)
        console.log('‚úÖ T√≠tulo atualizado com sucesso!')
        break

      case '3':
        // Atualizar descri√ß√£o
        console.log('Digite a nova descri√ß√£o (formato HTML permitido):')
        const newDescription = await question('')

        console.log('\n‚è≥ Atualizando descri√ß√£o...')
        await updateProductDescription(selectedProduct.id, newDescription)
        console.log('‚úÖ Descri√ß√£o atualizada com sucesso!')
        break

      case '4':
        // Adicionar imagem
        const imageUrl = await question('Digite a URL da imagem: ')
        const altText = await question('Digite o texto alternativo (alt): ')

        console.log('\n‚è≥ Adicionando imagem...')
        await addProductImage(selectedProduct.id, imageUrl, altText)
        console.log('‚úÖ Imagem adicionada com sucesso!')
        break

      case '5':
        // Remover imagem
        console.log('\nImagens atuais:')
        const productDetails = await getProductByHandle(selectedProduct.handle)
        productDetails.images.edges.forEach((img, idx) => {
          console.log(`${idx + 1}. ${img.node.url}`)
        })

        const imgIndex = await question('\nDigite o n√∫mero da imagem a remover: ')
        const selectedImage = productDetails.images.edges[parseInt(imgIndex) - 1]

        if (selectedImage) {
          console.log('\n‚è≥ Removendo imagem...')
          await deleteProductImage(selectedProduct.id, selectedImage.node.id)
          console.log('‚úÖ Imagem removida com sucesso!')
        } else {
          console.log('‚ùå Imagem n√£o encontrada!')
        }
        break

      case '0':
        console.log('\nüëã At√© logo!')
        break

      default:
        console.log('\n‚ùå Op√ß√£o inv√°lida!')
    }

  } catch (error) {
    console.error('\n‚ùå Erro:', error.message)
    if (error.message.includes('Shopify API Error')) {
      console.error('\nüí° Dica: Verifique se o SHOPIFY_ADMIN_ACCESS_TOKEN est√° configurado corretamente no .env.local')
    }
  } finally {
    rl.close()
  }
}

main()
